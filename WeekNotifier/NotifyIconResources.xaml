<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:tb="http://www.hardcodet.net/taskbar"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:weekNotifier="clr-namespace:WeekNotifier"
                    mc:Ignorable="d">

    <!-- The taskbar context menu -->
    <!-- The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon) -->
    <ContextMenu x:Shared="false" x:Key="SysTrayMenu" d:DataContext="{d:DesignData NotifyIconViewModel}">
        <MenuItem Header="Refresh" Command="{Binding RefreshCommand}" FontWeight="Bold" />
        <MenuItem Header="Settings..." Command="{Binding ToggleSettingsWindowCommand}" />
        <MenuItem Header="About..." Command="{Binding ToggleAboutWindowCommand}" />
        <Separator />
        <MenuItem Header="Exit" Command="{Binding ExitApplicationCommand}" />
    </ContextMenu>


    <!-- the application's NotifyIcon - started from App.xaml.cs. Declares its own viewmodel. -->
    <!-- I can't figure out how to create an IconSource image with text so this data binding would work. -->
    <!-- Programatically set the Icon property instead of using IconSource="{Binding TaskbarIconSource}"-->

    <tb:TaskbarIcon x:Key="NotifyIcon" 
                    ToolTipText="{Binding ToolTipText}"
                    DoubleClickCommand="{Binding RefreshCommand}"
                    LeftClickCommand="{Binding ToggleMouseMoverCommand}"
                    ContextMenu="{StaticResource SysTrayMenu}">

        <!-- self-assign a data context (done programmatically to set Icon) -->
        <!--<tb:TaskbarIcon.DataContext>
            <weekNumberToast:NotifyIconViewModel />
        </tb:TaskbarIcon.DataContext>-->
    </tb:TaskbarIcon>

</ResourceDictionary>